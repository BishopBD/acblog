@page "/keywords/new"
@page "/keywords/{id}/edit"
@attribute [Authorize]
@inherits BaseKeywordPage
@inject IAccessTokenProvider TokenProvider

<div class="container">
    <ItemEditor IsCreate="@IsCreate" Title="@(IsCreate ? "Create keyword" : "Edit keyword")" OnCheckValidation="@OnCheckValidation" OnCreate="@OnCreate" OnDelete="@OnDelete" OnUpdate="@OnUpdate">
        <Loader OnLoad="@OnLoad">
            <div class="input-group mt-3">
                <div class="input-group-prepend">
                    <label class="input-group-text" for="inputName">Name</label>
                </div>
                <input type="text" class="form-control" @bind-value="Model.Name" id="inputName" required />
            </div>
        </Loader>
    </ItemEditor>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private bool IsCreate { get; set; }

    private Keyword Model { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await Service.KeywordService.UseToken(TokenProvider);
        await base.OnInitializedAsync();
    }

    private async Task OnLoad()
    {
        Title = "Loading...";
        if (string.IsNullOrWhiteSpace(Id))
        {
            Model = new Keyword();
            IsCreate = true;
            Title = "New";
        }
        else
        {
            Model = await Service.KeywordService.Get(Id);
            IsCreate = false;
            Title = "Edit";
        }
    }

    private Task OnCheckValidation(ModelValidation validation)
    {
        if (string.IsNullOrWhiteSpace(Model.Name))
        {
            validation.Errors.Add("Name is empty.");
        }
        return Task.CompletedTask;
    }

    private async Task OnCreate(EventCallbackResult<bool> result)
    {
        var id = await Service.KeywordService.Create(Model);
        result.Result = id != null;
        if (id != null)
        {
            NavigationManager.NavigateTo($"keywords/{id}");
        }
    }

    private async Task OnUpdate(EventCallbackResult<bool> result)
    {
        var pass = await Service.KeywordService.Update(Model);
        result.Result = pass;
        if (pass)
        {
            NavigationManager.NavigateTo($"keywords/{Model.Id}");
        }
    }

    private async Task OnDelete(EventCallbackResult<bool> result)
    {
        var pass = await Service.KeywordService.Delete(Model.Id);
        result.Result = pass;
        if (pass)
        {
            NavigationManager.NavigateTo("keywords");
        }
    }
}
