@page "/posts/new"
@page "/posts/{id}/edit"
@attribute [Authorize]
@inherits BasePostPage
@inject IAccessTokenProvider TokenProvider

<div class="container">
    <Loader OnLoad="@OnLoad">
        <div class="d-flex flex-row">
            <h1>@(IsNew ? "Create" : "Edit") post</h1>
        </div>

        <div class="input-group mt-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputTitle">Title</label>
            </div>
            <input type="text" class="form-control" @bind-value="Model.Title" id="inputTitle" required />
            <div class="input-group-append">
                @if (IsNew)
                {
                    <button type="button" class="btn btn-success mdi mdi-plus" @onclick="@OnCreate">Create</button>
                }
                else
                {
                    <button type="button" class="btn btn-primary mdi mdi-content-save" @onclick="@OnUpdate">Save</button>
                    <button type="button" class="btn btn-danger mdi mdi-trash-can" @onclick="@OnDelete">Delete</button>
                }
            </div>
        </div>

        <div class="input-group mt-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputType">Type</label>
            </div>
            <select class="custom-select" id="inputType" @bind="Model.Type">
                <option value="@PostType.Article" class="mdi mdi-presentation">Article</option>
                <option value="@PostType.Slides">Slides</option>
                <option value="@PostType.Note">Note</option>
            </select>
        </div>

        <div class="input-group mt-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputCategory">Category</label>
            </div>
            <select class="custom-select" id="inputCategory" @bind="Model.CategoryId">
                <option value="@string.Empty"></option>
                @foreach (var item in Categories)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
        </div>

        <div class="form-group mt-3">
            <label class="col-form-label">Keywords</label>
            <span class="form-control">
                @foreach (var item in SelectedKeywords)
                {
                    <text>@item.Name;</text>
                }
            </span>
        </div>

        <div class="input-group mt-3">
            <div class="input-group-prepend">
                <label class="input-group-text" for="inputKeyword">Keyword</label>
            </div>
            <select class="custom-select" id="inputKeyword" @bind="SelectKeywordId">
                <option value="@string.Empty"></option>
                @foreach (var item in Keywords)
                {
                    <option value="@item.Id">@item.Name</option>
                }
            </select>
            <div class="input-group-append">
                <button type="button" class="btn btn-success mdi mdi-plus" @onclick="@OnAddKeyword">Add</button>
                <button type="button" class="btn btn-secondary mdi mdi-minus" @onclick="@OnRemoveKeyword">Remove</button>
            </div>
        </div>

        <div class="form-group mt-3">
            <label for="inputContent" class="col-form-label">Content</label>
            <textarea class="form-control" id="inputContent" @bind="Model.Content.Raw" style="height: 800px" />
        </div>
    </Loader>
    <MessageModal @ref="message"></MessageModal>
</div>

@code {
    [Parameter]
    public string Id { get; set; }

    private bool IsNew { get; set; }

    private Post Model { get; set; }

    private string SelectKeywordId { get; set; } = "";

    private IEnumerable<Category> Categories { get; set; }

    private IEnumerable<Keyword> Keywords { get; set; }

    private List<Keyword> SelectedKeywords { get; set; }

    private MessageModal message;

    protected override async Task OnInitializedAsync()
    {
        await Service.PostService.UseToken(TokenProvider);
        await base.OnInitializedAsync();
    }

    private async Task OnLoad()
    {
        Title = "Loading...";
        if (string.IsNullOrWhiteSpace(Id))
        {
            Model = new Post();
            SelectedKeywords = new List<Keyword>();
            IsNew = true;
            Title = "New";
        }
        else
        {
            Model = await Service.PostService.Get(Id);
            SelectedKeywords = new List<Keyword>(await Service.KeywordService.GetData(Model.KeywordIds));
            IsNew = false;
            Title = "Edit";
        }

        Categories = await Service.CategoryService.GetAllData();
        Keywords = await Service.KeywordService.GetAllData();
    }

    private void OnAddKeyword()
    {
        var k = Keywords.FirstOrDefault(x => x.Id == SelectKeywordId);
        if (k == null)
            return;
        SelectedKeywords.Add(k);
        StateHasChanged();
    }

    private void OnRemoveKeyword()
    {
        var k = SelectedKeywords.FirstOrDefault(x => x.Id == SelectKeywordId);
        if (k == null)
            return;
        SelectedKeywords.Remove(k);
        StateHasChanged();
    }

    private async Task<bool> CheckValidation()
    {
        if (string.IsNullOrWhiteSpace(Model.Title))
        {
            await message.Show("Title is empty.");
            return false;
        }
        return true;
    }

    private async Task OnCreate()
    {
        if (!await CheckValidation()) return;

        Model.KeywordIds = SelectedKeywords.Select(x => x.Id).ToArray();
        Model.CreationTime = DateTimeOffset.Now;
        var id = await Service.PostService.Create(Model);
        if (id == null)
        {
            await message.Show("Create failed");
        }
        else
        {
            NavigationManager.NavigateTo($"posts/{id}");
        }
    }

    private async Task OnUpdate()
    {
        if (!await CheckValidation()) return;

        Model.KeywordIds = SelectedKeywords.Select(x => x.Id).ToArray();
        Model.ModificationTime = DateTimeOffset.Now;
        var pass = await Service.PostService.Update(Model);
        if (!pass)
        {
            await message.Show("Update failed");
        }
        else
        {
            NavigationManager.NavigateTo($"posts/{Model.Id}");
        }
    }

    private async Task OnDelete()
    {
        var pass = await Service.PostService.Delete(Model.Id);
        if (!pass)
        {
            await message.Show("Delete failed");
        }
        else
        {
            NavigationManager.NavigateTo("posts");
        }
    }
}
