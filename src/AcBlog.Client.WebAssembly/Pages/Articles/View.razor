@page "/articles/{id}"
@inherits BaseArticlePage
@using AcBlog.Client.Components.Markdown

<Loader OnLoad="@OnLoad" OnLoaded="@OnLoaded">
    @if (IsProtected)
    {
        <div class="container">
            <h1 class="display-4">Protected Post</h1>
            <button type="button" class="btn btn-primary mt-3" style="width: 100%;" @onclick="@OnDeprotectClick">Deprotect</button>
        </div>

        <InputPasswordModal @ref="inputPasswordModal" OnPasswordSubmit="@OnPasswordSubmit"></InputPasswordModal>
    }
    else
    {
        <div class="row">
            <div class="col-2"></div>
            <div class="col-10">
                <h1 class="display-4">@Post.Title</h1>
                <PostMetadataDisplay Value="@Post" />
            </div>
        </div>

        <div class="row mt-3">
            <div class="col-2">
                <div id="post-toc" style="position: sticky; top: 1rem">

                </div>
            </div>
            <article class="markdown-body col-10">
                <MarkdownRenderer Value="@Post.Content" TocElementId="post-toc" />
            </article>
        </div>
    }
</Loader>

@code {
    [Parameter]
    public string Id { get; set; }

    private Post Post { get; set; }

    private bool IsProtected { get; set; } = false;

    private InputPasswordModal inputPasswordModal;

    private async Task OnLoaded()
    {
        if (Post == null)
        {
            Title = "Loading...";
        }
        else
        {
            if (IsProtected)
            {
                Title = "Protected Post";
                await inputPasswordModal.Show();
            }
            else
            {
                Title = Post.Title;
            }
        }
    }

    private async Task OnLoad()
    {
        Post = await Service.PostService.Get(Id);
        IsProtected = await Service.PostService.Protector.IsProtected(Post);
    }

    private async Task OnPasswordSubmit(string password)
    {
        try
        {
            Post dep = await Service.PostService.Protector.Deprotect(Post, new Data.Protections.ProtectionKey
            {
                Password = password
            });
            Post = dep;
            IsProtected = await Service.PostService.Protector.IsProtected(Post);
            if (!IsProtected)
                await inputPasswordModal.Hide();
        }
        catch
        {
            throw new WrongPasswordException();
        }
    }

    private async Task OnDeprotectClick()
    {
        await inputPasswordModal.Show();
    }
}
