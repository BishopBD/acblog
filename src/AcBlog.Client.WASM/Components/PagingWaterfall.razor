@typeparam TItem

@if (Data != null)
{
    <div class="card-columns @(!Column.HasValue ? "waterfall-card-columns" : "")" style="@(Column.HasValue ? $"column-count: {Column.Value}" : "")">
        @foreach (var item in Data.Results)
        {
            @ItemTemplate(item)
        }
    </div>

    @if (Data.CurrentPage != null)
    {
        <div class="text-center">
            <ul class="pagination" style="display:inline-flex">
                @if (Data.CurrentPage.HasPreviousPage)
                {
                    <li class="page-item">
                        <a class="page-link mdi mdi-chevron-left" style="cursor:pointer" @onclick="@(async e=>await OnPreviousPage.InvokeAsync(null))"></a>
                    </li>
                }
                @for (int i = Math.Max(0, Data.CurrentPage.PageNumber - 5); i < Math.Min(Data.CurrentPage.TotalPage, Data.CurrentPage.PageNumber + 5); i++)
                {
                    int pn = i;
                    <li class="page-item @(i == Data.CurrentPage.PageNumber ? "active" : "")">
                        <a class="page-link" style="cursor:pointer" @onclick="@(async e=>await OnPageTo.InvokeAsync(pn))">@(i+1)</a>
                    </li>
                }
                @if (Data.CurrentPage.HasNextPage)
                {
                    <li class="page-item">
                        <a class="page-link mdi mdi-chevron-right" style="cursor:pointer" @onclick="@(async e=>await OnNextPage.InvokeAsync(null))"></a>
                    </li>
                }
            </ul>
        </div>
    }
}

@code {

    [Parameter]
    public QueryResponse<TItem> Data { get; set; }

    [Parameter]
    public int? Column { get; set; } = null;

    [Parameter]
    public RenderFragment<TItem> ItemTemplate { get; set; }

    [Parameter]
    public EventCallback OnUpdatePage { get; set; }

    [Parameter]
    public EventCallback OnPreviousPage { get; set; }

    [Parameter]
    public EventCallback OnNextPage { get; set; }

    [Parameter]
    public EventCallback<int> OnPageTo { get; set; }
}
