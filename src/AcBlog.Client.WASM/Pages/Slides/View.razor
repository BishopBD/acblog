@page "/slides/{id}"
@inherits BaseSlidePage
@using AcBlog.Client.Components.Slides

@if (Post == null)
{
    <Loader></Loader>
}
else if (IsProtected)
{
    <div class="container">
        <h1 class="display-4">Protected Slides</h1>
        <button type="button" class="btn btn-primary mt-3" style="width: 100%;" @onclick="@OnDeprotectClick">Deprotect</button>
    </div>

    <InputPasswordModal @ref="inputPasswordModal" OnPasswordSubmit="@OnPasswordSubmit"></InputPasswordModal>
}
else
{
    <div class="container">
        <h1 class="display-4">@Post.Title</h1>
        <PostMetadataDisplay Value="@Post" />
        <div class="mt-3">
            <SlidesRenderer Value="@Post.Content" Style="@SlidesStyle"></SlidesRenderer>
        </div>
        <button type="button" class="btn btn-primary mt-2" style="width: 100%;" @onclick="@OnFullViewClick">Full View</button>
    </div>
}

@code {
    [Parameter]
    public string Id { get; set; }

    private Post Post { get; set; }

    private bool IsProtected { get; set; } = false;

    private string SlidesStyle { get; set; } = "border: 0; height: 500px; width: 100%";

    private InputPasswordModal inputPasswordModal;

    protected override async Task OnParametersSetAsync()
    {
        Post = await Service.SlidesService.Get(Id);
        IsProtected = await Service.SlidesService.Protector.IsProtected(Post);
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Post == null)
        {
            Title = "Loading...";
        }
        else
        {
            if (IsProtected)
            {
                Title = "Protected Post";
                await inputPasswordModal.Show();
            }
            else
            {
                Title = Post.Title;
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnPasswordSubmit(string password)
    {
        Post dep = await Service.SlidesService.Protector.Deprotect(Post, new Data.Protections.ProtectionKey
        {
            Password = password
        });
        Post = dep;
        IsProtected = await Service.SlidesService.Protector.IsProtected(Post);
        if (!IsProtected)
            await inputPasswordModal.Hide();
    }

    private async Task OnDeprotectClick()
    {
        await inputPasswordModal.Show();
    }

    private Task OnFullViewClick()
    {
        SlidesStyle = "left: 0; right: 0; top: 0; bottom: 0; margin:0; border:0; position: absolute; height: 100%; width:100%; z-index: 500;";
        return Task.CompletedTask;
    }
}
