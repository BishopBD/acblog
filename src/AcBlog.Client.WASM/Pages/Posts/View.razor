@page "/posts/{id}"
@inherits BasePostPage
@using AcBlog.Client.Components.Markdown

@if (Post == null)
{
    <Loader></Loader>
}
else if (IsProtected)
{
    <div class="container">
        <h1 class="display-4">Protected Post</h1>
        <button type="button" class="btn btn-primary mt-3" style="width: 100%;" data-toggle="modal" data-target="#@PasswordModalId">Deprotect</button>
    </div>

    <div class="modal fade" id="@PasswordModalId" data-backdrop="static" tabindex="-1" role="dialog" aria-labelledby="passwordModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="passwordModalLabel">Input password</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    <div class="form-group">
                        <label for="inputPassword" class="col-form-label">Password:</label>
                        <input type="password" class="form-control @(string.IsNullOrEmpty(PasswordInputMessage) ? "" : "is-invalid")" id="inputPassword" @bind="Password" required>
                        <div class="invalid-feedback">
                            @PasswordInputMessage
                        </div>
                    </div>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Cancel</button>
                    <button type="button" class="btn btn-primary" @onclick="@OnPasswordSubmit">Deprotect</button>
                </div>
            </div>
        </div>
    </div>
}
else
{
    <div class="row">
        <div class="col-2"></div>
        <div class="col-10">
            <h1 class="display-4">@Post.Title</h1>
            <PostMetadataDisplay Value="@Post" />
        </div>
    </div>

    <div class="row">
        <div class="col-2">
            <div id="post-toc" style="position: sticky; top: 1rem">

            </div>
        </div>
        <article class="markdown-body col-10">
            <MarkdownRenderer Value="@Post.Content" TocElementId="post-toc" />
        </article>
    </div>
}

@code {
    const string PasswordModalId = "passwordModal";

    [Parameter]
    public string Id { get; set; }

    private Post Post { get; set; }

    private string Password { get; set; }

    private bool IsProtected { get; set; } = false;

    private string PasswordInputMessage { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        Post = await Service.PostService.Get(Id);
        IsProtected = await Service.PostService.Protector.IsProtected(Post);
        await base.OnParametersSetAsync();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (Post == null)
        {
            Title = "Loading...";
        }
        else
        {
            if (IsProtected)
            {
                Title = "Protected Post";
                await ModalInterop.Show(JSRuntime, PasswordModalId);
            }
            else
            {
                Title = Post.Title;
            }
        }
        await base.OnAfterRenderAsync(firstRender);
    }

    private async Task OnPasswordSubmit()
    {
        Post dep = null;
        try
        {
            dep = await Service.PostService.Protector.Deprotect(Post, new Data.Protections.ProtectionKey
            {
                Password = Password
            });
        }
        catch
        {
            Password = "";
            PasswordInputMessage = "Wrong password.";
            return;
        }
        Post = dep;
        IsProtected = await Service.PostService.Protector.IsProtected(Post);
        if (!IsProtected)
        {
            await ModalInterop.Hide(JSRuntime, PasswordModalId);
        }
    }
}
