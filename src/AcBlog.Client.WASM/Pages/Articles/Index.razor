@page "/articles"
@page "/articles/list"
@page "/articles/list/{pageNumber:int}"
@inherits BaseArticlePage

<div class="container">
    <div class="d-flex flex-row">
        <h1>Articles</h1>
    </div>

    @if (Data == null)
    {
        <Loader></Loader>
    }
    else
    {
        <PagingWaterfall Data="@Data" Column="1" OnUpdatePage="@OnUpdatePage" OnNextPage="@OnNextPage" OnPreviousPage="@OnPreviousPage" OnPageTo="@OnPageTo">
            <ItemTemplate>
                <PostCard PostId="@context" Service="@Service.ArticleService" Href="@($"articles/{context}")"></PostCard>
            </ItemTemplate>
        </PagingWaterfall>
    }
</div>

@code {
    const int CountPerPage = 10;

    QueryResponse<string> Data { get; set; }

    [Parameter]
    public int? PageNumber { get; set; } = null;

    protected override async Task OnParametersSetAsync()
    {
        Data = null;
        Title = "Loading...";

        Data = await Service.ArticleService.Query(new PostQueryRequest
        {
            Paging = new Pagination
            {
                PageNumber = PageNumber ?? 0,
                CountPerPage = CountPerPage
            }
        });
        Title = $"Page {Data.CurrentPage.PageNumber + 1}";
        await base.OnParametersSetAsync();
    }

    private Task OnPageTo(int pageNumber)
    {
        NavigationManager.NavigateTo($"articles/list/{pageNumber}");
        return Task.CompletedTask;
    }

    private async Task OnUpdatePage()
    {
        Data = await Service.ArticleService.Query(new PostQueryRequest
        {
            Paging = Data.CurrentPage
        });
    }

    private Task OnPreviousPage()
    {
        return OnPageTo(Data.CurrentPage.PageNumber - 1);
    }

    private Task OnNextPage()
    {
        return OnPageTo(Data.CurrentPage.PageNumber + 1);
    }
}
