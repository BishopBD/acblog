@inject IJSRuntime JSRuntime
@inject NavigationManager NavigationManager

@using Markdig

<div @ref="markdownContent">
    @((MarkupString)Prerender)
</div>

@code {
    static MarkdownPipeline Pipeline { get; } = new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();

    [Parameter]
    public string Value { get; set; } = "";

    [Parameter]
    public string TocElementId { get; set; } = null;

    private string Prerender = "";

    private ElementReference markdownContent;

    private string BaseUrl { get; set; }

    protected override void OnInitialized()
    {
        BaseUrl = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var ind = BaseUrl.IndexOf('#');
        if (ind >= 0)
            BaseUrl = BaseUrl.Remove(ind);

        Prerender = Markdig.Markdown.ToHtml(Value, Pipeline);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await Render(Value);
    }

    public async Task Render(string value)
    {
        Value = value;
        await JSRuntime.InvokeVoidAsync("AcBlogClientComponentsMarkdown_markdownRender", markdownContent, Value, TocElementId, BaseUrl);
    }
}
