name: CI

on: [push, pull_request]

defaults:
  run:
    shell: pwsh

env:
  dotnet-version: "3.1.201"
  node-version: "12.x"

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Restore & Build
      run: |
        npm install --global gulp
        dotnet tool install --global Microsoft.Web.LibraryManager.Cli
        pwsh -c ./tools.ps1 restore
        dotnet build -c Release
    - name: Test
      run: |
        mkdir reports/test
        dotnet test -c Release /p:CollectCoverage=true /p:CoverletOutput=../../reports/test/coverage.json /p:MergeWith=../../reports/test/coverage.json /maxcpucount:1
        dotnet test -c Release ./test/Test.Base /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../reports/test/coverage.xml /p:MergeWith=../../reports/test/coverage.json
    - name: Benchmark
      run: dotnet run -c Release --project ./test/Benchmark.Base
    - name: Generate reports
      run: |
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path ./tools
        ./tools/reportgenerator -reports:./reports/test/coverage.xml -targetdir:./reports/test
        mkdir reports/benchmark
        Copy-Item ./BenchmarkDotNet.Artifacts/* ./reports/benchmark -Recurse
    - name: Upload reports
      uses: actions/upload-artifact@master
      with:
        name: ci-${{ matrix.os }}
        path: ./reports
  pub-wasm:
    needs: ci
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Restore & Build
      run: |
        npm install --global gulp
        dotnet tool install --global Microsoft.Web.LibraryManager.Cli
        pwsh -c ./tools.ps1 restore
        dotnet build -c Release
    - name: Publish Client.WebAssembly
      run: |
        cd src/AcBlog.Client.WebAssembly
        mkdir publish
        dotnet publish -c Release -o ./publish
        echo "{ ""build"": { ""Commit"": ""$env:GITHUB_SHA"", ""Branch"": ""$env:GITHUB_REF"", ""BuildDate"": ""$(date)"", ""Repository"": ""$env:GITHUB_REPOSITORY"" } }" > ./publish/wwwroot/build.json
    - name: Upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: wasm
        path: ./src/AcBlog.Client.WebAssembly/publish
    - name: Push image
      if: github.event_name == 'push'
      uses: docker/build-push-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        repository: acblog/wasm
        tag_with_ref: true
        dockerfile: ./docker/client/wasm/Dockerfile
  pub-pkgs:
    needs: ci
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ env.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ env.node-version }}
    - name: Restore & Build
      run: |
        npm install --global gulp
        dotnet tool install --global Microsoft.Web.LibraryManager.Cli
        pwsh -c ./tools.ps1 restore
        dotnet build -c Release
    - name: Pack
      run: |
        mkdir packages
        dotnet pack -c Release -o ./packages
    - name: Upload artifacts
      uses: actions/upload-artifact@master
      with:
        name: packages
        path: ./packages
    - name: Deploy
      if: github.event_name == 'push'
      env:
        MYGET_TOKEN: ${{ secrets.MYGET_TOKEN }}
        VERSION: "0.0.1"
      run: |
        dotnet nuget push ./packages/AcBlog.Client.Components.CodeEditor.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Client.Components.Loading.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Client.Components.Markdown.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Client.Components.Slides.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Data.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Data.Repositories.FileSystem.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.Data.Repositories.SQLServer.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
        dotnet nuget push ./packages/AcBlog.SDK.$env:VERSION.nupkg -k $env:MYGET_TOKEN -s https://www.myget.org/F/stardustdl/api/v2/package
  invoke-mirrors:
    needs: pub-wasm
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        repository: "acblog/mirrors"
        persist-credentials: false
    - name: Commit
      run: |
        git config --global user.email ""
        git config --global user.name "Auto mirror invoker"
        git commit -m "$(date)" --allow-empty
    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        repository: "acblog/mirrors"
        github_token: ${{ secrets.PUSH_TOKEN }}
