name: CI

on: [push, pull_request]

jobs:
  ci:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
        config: [Release]
        dotnet-version: ["3.1.201"]
        node-version: ["12.x"]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Restore & Build
      env:
        CONFIG: ${{ matrix.config }}
      run: |
        npm install --global gulp
        dotnet tool install --global Microsoft.Web.LibraryManager.Cli
        pwsh -c ./tools.ps1 restore
        dotnet build -c $env:CONFIG
      shell: pwsh
    - name: Test
      env:
        CONFIG: ${{ matrix.config }}
      run: |
        mkdir reports/test
        dotnet test -c $env:CONFIG /p:CollectCoverage=true /p:CoverletOutput=../../reports/test/coverage.json /p:MergeWith=../../reports/test/coverage.json /maxcpucount:1
        dotnet test -c $env:CONFIG ./test/Test.Base /p:CollectCoverage=true /p:CoverletOutputFormat=opencover /p:CoverletOutput=../../reports/test/coverage.xml /p:MergeWith=../../reports/test/coverage.json
      shell: pwsh
    - name: Benchmark
      env:
        CONFIG: ${{ matrix.config }}
      run: dotnet run -c $env:CONFIG --project ./test/Benchmark.Base
      shell: pwsh
    - name: Generate reports
      run: |
        dotnet tool install dotnet-reportgenerator-globaltool --tool-path ./tools
        ./tools/reportgenerator -reports:./reports/test/coverage.xml -targetdir:./reports/test
        mkdir reports/benchmark
        Copy-Item ./BenchmarkDotNet.Artifacts/* ./reports/benchmark -Recurse
      shell: pwsh
    - name: Upload reports
      uses: actions/upload-artifact@master
      with:
        name: ci-${{ matrix.os }}-${{ matrix.config }}-${{ matrix.dotnet-version }}
        path: ./reports
  wasmpub:
    needs: ci
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest]
        config: [Release]
        dotnet-version: ["3.1.201"]
        node-version: ["12.x"]
    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout
      uses: actions/checkout@v2
    - name: Setup dotnet
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: ${{ matrix.dotnet-version }}
    - name: Setup NodeJS
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - name: Restore & Build
      env:
        CONFIG: ${{ matrix.config }}
      run: |
        npm install --global gulp
        pwsh -c ./tools.ps1 restore
        dotnet restore -s https://api.nuget.org/v3/index.json
        dotnet build -c $env:CONFIG
      shell: pwsh
    - name: Publish Client.WASM
      env:
        CONFIG: ${{ matrix.config }}
      run: |
        cd src/AcBlog.Client.WASM
        mkdir publish
        dotnet publish -c $env:CONFIG -o ./publish
      shell: pwsh
    - name: Upload artifact
      uses: actions/upload-artifact@master
      with:
        name: wasmpub-${{ matrix.os }}-${{ matrix.config }}-${{ matrix.dotnet-version }}
        path: ./src/AcBlog.Client.WASM/publish
    - name: Build image
      run: |
        docker build . --file ./docker/client/wasm/Dockerfile --tag acblog:wasm
    - name: Push image
      if: github.event_name == 'push'
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
        DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
      run: |
        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin
        docker tag acblog:wasm $DOCKER_USERNAME/acblog:wasm
        docker push $DOCKER_USERNAME/acblog:wasm
